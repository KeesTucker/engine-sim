import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

// Engine basic geometry
label bore(105)
label stroke(80)
label con_rod(130)

label redline(10050.0)

label cyl(1.0)
label cycle(2.0 * 360.0 * units.deg)
label rot(2.0 * (360.0 / cyl) * units.deg)
label rot90(90.0 * units.deg)
label rot180(180.0 * units.deg)
label rot360(360.0 * units.deg)

// Valve and duration settings
label intake_valve_lift(11.3)
label exhaust_valve_lift(10.4)
label IVO(6.0 * units.deg) // BTDC
label IVC(53.0 * units.deg) // ABDC
label EVO(45.0 * units.deg) // BBDC
label EVC(11.0 * units.deg) // ATDC

label intake_duration(IVO + IVC + rot180)
label exhaust_duration(EVO + EVC + rot180)

label ILC((-IVO + rot180 + IVC) / 2.0 + rot360)
label ELC((rot180 - EVO + EVC + rot360) / 2.0)

label head_intake_flow_attenuation(2)
label head_exhaust_flow_attenuation(2)

label head_intake_valve_radius(21)
label head_exhaust_valve_radius(18)

label head_intake_runner_length(150)
label head_exhaust_runner_length(150)

// Ignition module remains unchanged
public node eng_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 10050 * units.rpm;
    input limiter_duration: 0.05;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, 000 * units.deg);
}

private node wires {
    output wire1: ignition_wire();
}

// Cam lobe profiles (unchanged)
public node intake_lobe_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: intake_duration,
            gamma: 4.5,
            lift: intake_valve_lift * units.mm,
            steps: 500
        );
}

public node exhaust_lobe_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: exhaust_duration,
            gamma: 4.5,
            lift: exhaust_valve_lift * units.mm,
            steps: 500
        );
}

public node camshaft_builder {
    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: 0.0 * units.deg,
        base_radius: 15 * units.mm
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile())
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile())

    _intake_cam_0
        .add_lobe(ILC + 000 * units.deg)
    _exhaust_cam_0
        .add_lobe(ELC + 000 * units.deg)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

//--- HEAD: Adjusted runner volumes & cross‐sections ---//
// For a smoother, later breathing character, we adjust the cylinder head geometry.
// Original values were: intake_runner_volume: 80 cc, intake_runner_cross_section_area: 22 cm²,
//                              exhaust_runner_volume: 180 cc, exhaust_runner_cross_section_area: 22 cm².
// We change these to mimic the smoother KTM 390 behavior:
//   • Increase intake runner volume to ~150 cc and reduce its area to ~9 cm².
//   • Reduce exhaust runner volume to ~20 cc and its area to ~7 cm².
public node head {
    input intake_camshaft;
    input exhaust_camshaft;
    input flip_display: false;
    
    alias output __out: head;

	function intake_flow(1.130 * units.mm)
	intake_flow
		.add_flow_sample(0.000,   0 * head_intake_flow_attenuation)      // 0.0 mm
		.add_flow_sample(1.130,  53 * head_intake_flow_attenuation)      // 1.13 mm
		.add_flow_sample(2.260, 107 * head_intake_flow_attenuation)      // 2.26 mm
		.add_flow_sample(3.390, 168 * head_intake_flow_attenuation)      // 3.39 mm
		.add_flow_sample(4.520, 221 * head_intake_flow_attenuation)      // 4.52 mm
		.add_flow_sample(5.650, 251 * head_intake_flow_attenuation)      // 5.65 mm
		.add_flow_sample(6.780, 265 * head_intake_flow_attenuation)      // 6.78 mm
		.add_flow_sample(7.910, 270 * head_intake_flow_attenuation)      // 7.91 mm – still rising
		.add_flow_sample(9.040, 275 * head_intake_flow_attenuation)      // 9.04 mm
		.add_flow_sample(10.170,278 * head_intake_flow_attenuation)      // 10.17 mm
		.add_flow_sample(11.300,280 * head_intake_flow_attenuation)      // 11.30 mm (saturation reached)

	function exhaust_flow(1.040 * units.mm)
	exhaust_flow
		.add_flow_sample(0.000,   0 * head_exhaust_flow_attenuation)      // 0.0 mm
		.add_flow_sample(1.040,  29 * head_exhaust_flow_attenuation)      // 1.04 mm
		.add_flow_sample(2.080,  80 * head_exhaust_flow_attenuation)      // 2.08 mm
		.add_flow_sample(3.120, 126 * head_exhaust_flow_attenuation)      // 3.12 mm
		.add_flow_sample(4.160, 157 * head_exhaust_flow_attenuation)      // 4.16 mm
		.add_flow_sample(5.200, 175 * head_exhaust_flow_attenuation)      // 5.20 mm
		.add_flow_sample(6.240, 182 * head_exhaust_flow_attenuation)      // 6.24 mm
		.add_flow_sample(7.280, 186 * head_exhaust_flow_attenuation)      // 7.28 mm
		.add_flow_sample(8.320, 188 * head_exhaust_flow_attenuation)      // 8.32 mm
		.add_flow_sample(9.360, 188 * head_exhaust_flow_attenuation)      // 9.36 mm (saturation)
		.add_flow_sample(10.400,188 * head_exhaust_flow_attenuation)      // 10.40 mm

    cylinder_head head(
        chamber_volume: 20 * units.cc,
        intake_runner_volume: head_intake_valve_radius * units.mm * head_intake_valve_radius * units.mm * 3.14 * head_intake_runner_length * units.mm,
        intake_runner_cross_section_area: head_intake_valve_radius * units.mm * head_intake_valve_radius * units.mm * 3.14,
        exhaust_runner_volume: head_exhaust_valve_radius * units.mm * head_exhaust_valve_radius * units.mm * 3.14 * head_exhaust_runner_length * units.mm,
        exhaust_runner_cross_section_area: head_exhaust_valve_radius * units.mm * head_exhaust_valve_radius * units.mm * 3.14,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft
    )
}

//--- ENGINE BLOCK ---//
public node mrc14_engine {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Husqvarna 701 2017",
        starter_torque: 200 * units.Nm,
        starter_speed: 1200 * units.rpm,
        redline: 10050 * units.rpm,
        throttle_gamma: 3.2,
        dyno_min_speed: 2000 * units.rpm,
        fuel: fuel(
         max_burning_efficiency: 1
        ),
        hf_gain: 3.00,
        noise: 0.00,
        jitter: 0.7,
        simulation_frequency: 32000
    )
    label piston_mass(427 * units.g)
    label rod_mass(340 * units.g)
    label compression_height(27 * units.mm)
    label crank_mass(8 * units.kg)
    label flywheel_mass(3 * units.kg)
    label flywheel_radius(10 * units.cm)
    label balancing((cyl * (piston_mass + rod_mass) / 1) * units.kg)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: ((stroke * units.mm) / 2))
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: cyl + balancing * units.kg, radius: 8.0 * units.cm)
    )

    crankshaft c0(
        throw: ((stroke * units.mm) / 2),
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: (cyl * 0.1) * units.Nm,
        moment_of_inertia:
        crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: constants.pi / 2
    )

    rod_journal rj0(angle: 0 * units.deg)

    c0
        .add_rod_journal(rj0)
 
    piston_parameters piston_params(
        mass: piston_mass,
        blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: con_rod * units.mm
        ),
        center_of_mass: 0.0,
        length: con_rod * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: (bore * units.mm),
        deck_height: ((stroke * units.mm) / 2) + (con_rod * units.mm) + compression_height
    )

    label exhaust_crossection_area(20) // cm2
    label exhaust_pipe_length_0(150) // cm
    label  (exhaust_crossection_area * exhaust_pipe_length_0 / 3000.0) // Litres
    label primary_tube_length(150)

    //--- Adjust intake node: smaller plenum cross-sectional area for smoother flow ---//
    intake intake(
        plenum_volume: 5.0 * units.L,
        plenum_cross_section_area: 150 * units.cm2,
        runner_length: 50 * units.cm,
        intake_flow_rate: k_28inH2O(380),
        idle_throttle_plate_position: 0.9978,
        runner_flow_rate: k_28inH2O(380),
        velocity_decay: 1.0
    )
    
    exhaust_system_parameters es_params0(
        outlet_flow_rate: k_28inH2O(400),
        collector_cross_section_area: exhaust_crossection_area * units.cm2,
        length: exhaust_pipe_length_0 * units.cm,
        primary_tube_length: primary_tube_length * units.cm,
        primary_flow_rate: k_28inH2O(400),
        velocity_decay: 1.0
    )
   
    exhaust_system exhaust0(es_params0, impulse_response: ir_lib.mild_exhaust_0, audio_volume: 0.01)
 
    label spacing(1 * units.cm)
    cylinder_bank b0(bank_params, angle: 0)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1,
            primary_length: spacing * 1,
            sound_attenuation: 1.0
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    camshaft_builder camshaft()

    b0.set_cylinder_head (
        head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )

    function timing_curve(500 * units.rpm)
	timing_curve
		.add_sample(000 * units.rpm, 0 * units.deg)
		.add_sample(500 * units.rpm, 0 * units.deg)
		.add_sample(1000 * units.rpm, 0 * units.deg)
		.add_sample(1500 * units.rpm, 1 * units.deg)
		.add_sample(2000 * units.rpm, 2 * units.deg)
		.add_sample(2500 * units.rpm, 3.5 * units.deg)
		.add_sample(2750 * units.rpm, 4.0 * units.deg)
		.add_sample(3000 * units.rpm, 7.5 * units.deg)
		.add_sample(3250 * units.rpm, 10.0 * units.deg)
		.add_sample(3500 * units.rpm, 14.3 * units.deg)
		.add_sample(3750 * units.rpm, 17.3 * units.deg)
		.add_sample(4000 * units.rpm, 17.5 * units.deg)
		.add_sample(4250 * units.rpm, 18.1 * units.deg)
		.add_sample(4500 * units.rpm, 17.7 * units.deg)
		.add_sample(4750 * units.rpm, 19.3 * units.deg)
		.add_sample(5000 * units.rpm, 20.6 * units.deg)
		.add_sample(5250 * units.rpm, 20.2 * units.deg)
		.add_sample(5500 * units.rpm, 20 * units.deg)
		.add_sample(6000 * units.rpm, 19.8 * units.deg)
		.add_sample(6500 * units.rpm, 22.9 * units.deg)
		.add_sample(7000 * units.rpm, 24.3 * units.deg)
		.add_sample(7500 * units.rpm, 25.8 * units.deg)
		.add_sample(8000 * units.rpm, 26.5 * units.deg)
		.add_sample(8500 * units.rpm, 28.3 * units.deg)
		.add_sample(9000 * units.rpm, 29.4 * units.deg)
		.add_sample(9500 * units.rpm, 30.1 * units.deg)
		.add_sample(10000 * units.rpm, 30.1 * units.deg)

    engine.add_ignition_module(
        eng_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

label car_mass((155 + 85) * units.kg)
private node mrc14_vehicle {
    alias output __out:
        vehicle(
            mass: car_mass,
            drag_coefficient: 0.7,
            cross_sectional_area: (900 * units.mm) * (1400 * units.mm),
            diff_ratio: 9.5,
            tire_radius: 306 * units.mm,
            rolling_resistance: 42.3 * units.N,
            max_brake_force: 3000 * units.N
        );
}

private node mrc14_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 200 * units.Nm,
            max_clutch_flex: 7 * units.deg,
            limit_clutch_flex: true,
            clutch_stiffness: 20 * units.Nm / units.deg,
            clutch_damping: 2,
            simulate_flex: true
        )
        .add_gear(1 / 0.40)
        .add_gear(0.9 / 0.57)
        .add_gear(0.8 / 0.75)
        .add_gear(0.73 / 0.91)
        .add_gear(0.65 / 1.05)
        .add_gear(0.6 / 1.15);
}

public node main {
    run(
        engine: mrc14_engine(),
        transmission: mrc14_transmission(),
        vehicle: mrc14_vehicle()
    )
}

main()
